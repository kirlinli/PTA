#include <iostream>
using namespace std;

/*
题目:
给定某数字A（1≤A≤9）以及非负整数N（0≤N≤100000），求数列之和S=A+AA+AAA+⋯+AA⋯A（N个A）。例如A=1, N=3时，S=1+11+111=123。

输入格式：
输入数字A与非负整数N。

输出格式：
输出其N项数列之和S的值。

输入样例：
1 3
输出样例：
123
*/

//思路一:可以利用双重循环,计算第i个数,并将i依次相加。但这样的时间复杂度会增加,并且不能满足N很大的情况(结果会溢出)
//思路二:结果的每一位上的数都等于(N - i) * A % 10 + 上一位的进位数。因此可以将每一位的结果放在数组中,最后将结果逆序输出。
int main()
{
    int a,b;
    // cin>>a;
    // cin>>b;
    a = 1;
    b = 3;
    int sum[100003] = {0};
    //最多只会出现进一位的情况
    for(int i = 0; i < b; i++)
    {
        sum[i] += a * (b - i);
        //将进位情况保存到下一位中
        sum[i + 1] = sum[i] / 10;
        sum[i] = sum[i] % 10;
    }
    int i =  b;
    while(i >= 0)
    {
        //首位为0,即没有产生进位的情况
        if (i == b && sum[i] == 0)
        {
            i--;
            continue;
        }
				
        cout<<sum[i];
        i--;
    }
}